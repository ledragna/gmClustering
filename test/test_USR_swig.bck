{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import mdtraj as md\n",
    "import sys\n",
    "import scipy.spatial.distance as sd\n",
    "\n",
    "%load_ext autoreload"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "sys.path.append(\"/home/gmancini/Dropbox/appunti/Clustering/devel\")\n",
    "sys.path.append(\"/home/gmancini/Dropbox/appunti/Clustering/src\")\n",
    "import mdutils\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1.17.3'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.version.version"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load one frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(36, 3)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "traj = md.load(\"dpap.pdb\")\n",
    "traj.xyz[0].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.savetxt(\"coord0.dat\",traj.xyz[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## USR with python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.35222182,  0.01906353, -0.04395259,  0.35195622,  0.02027721,\n",
       "       -0.02875145,  0.70689148,  0.07996982, -0.71981287,  0.61054772,\n",
       "        0.07276626, -0.35701188])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "py_usr = mdutils.USR(traj.xyz[0])\n",
    "py_usr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## with C, GSL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/dist-packages/numpy/numpy.i\r\n"
     ]
    }
   ],
   "source": [
    "!ls /usr/local/lib/python3.7/dist-packages/numpy/numpy.i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rm -f *.so *.o pyusr.py *.pyc *.a *.gch pyusr_wrap.c usr_wrap.c\n",
      "gcc usr.h -std=c99 -fPIC -O3 -ffast-math -ftree-vectorize -march=native -fomit-frame-pointer -finline-functions -I. -I/usr/include/python3.7/ -I/usr/local/lib/python3.7/dist-packages/numpy/core/include/ -c usr.c\n",
      "gcc -o usr.exe usr.o -lm -fopenmp -lgsl -lgslcblas -lblas\n",
      "/home/gmancini/Dropbox/appunti/Clustering/test\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "cd ../src/\n",
    "make clean && make usr.exe\n",
    "cd -"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "36"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "traj.xyz[0].shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 loops, best of 5: 21 ms per loop\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "%%capture cap_out --no-stderr\n",
    "%%bash\n",
    "OMP_NUM_THREADS=4 ../src/usr.exe coord0.dat 36 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.35222182,  0.01906352, -0.04395271,  0.35195615,  0.02027721,\n",
       "       -0.02875005,  0.70689141,  0.07996982, -0.71981234,  0.61054763,\n",
       "        0.07276626, -0.35701096])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "c_usr = cap_out.stdout\n",
    "c_usr = np.array(list(map(float,c_usr.split())))\n",
    "c_usr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3.22181704e-09, 8.62715721e-09, 1.18282757e-07, 6.84810638e-08,\n",
       "       1.44258976e-09, 1.39779682e-06, 6.71080017e-08, 3.36044312e-09,\n",
       "       5.30025635e-07, 9.13859558e-08, 6.87370300e-10, 9.24450912e-07])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.abs(py_usr - c_usr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## with swig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rm -f *.so *.o pyusr.py *.pyc *.a *.gch pyusr_wrap.c usr_wrap.c\n",
      "gcc usr.h -std=c99 -fPIC -O3 -ffast-math -ftree-vectorize -march=native -fomit-frame-pointer -finline-functions -I. -I/usr/include/python3.7/ -I/usr/local/lib/python3.7/dist-packages/numpy/core/include/ -c usr.c\n",
      "gcc -o usr.exe usr.o -lm -fopenmp -lgsl -lgslcblas -lblas\n",
      "swig  -python -Wall -l/usr/local/lib/python3.7/dist-packages/numpy/numpy.i pyusr.i\n",
      "gcc usr.h -std=c99 -fPIC -O3 -ffast-math -ftree-vectorize -march=native -fomit-frame-pointer -finline-functions -I. -I/usr/include/python3.7/ -I/usr/local/lib/python3.7/dist-packages/numpy/core/include/ -c pyusr_wrap.c\n",
      "gcc -shared -o _pyusr.so usr.o pyusr_wrap.o -lm -fopenmp -lgsl -lgslcblas -lblas\n",
      "/home/gmancini/Dropbox/appunti/Clustering/test\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "cd ../src\n",
    "make clean && make \n",
    "cd -"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyusr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.35222182,  0.01906352, -0.04395271,  0.35195615,  0.02027721,\n",
       "       -0.02875005,  0.70689141,  0.07996982, -0.71981234,  0.61054763,\n",
       "        0.07276626, -0.35701096])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "swig_usr = np.zeros(12)\n",
    "weights = np.ones(traj.n_atoms)\n",
    "#void pyUSR(int natoms, int dim, double *X, int n2, double *weights, int ncomp, double *USR, int verbosity)\n",
    "pyusr.pyUSR(traj.xyz[0], weights, swig_usr, 0)\n",
    "swig_usr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4.86095997e-10, 1.10322631e-08, 1.21394827e-07, 6.35043546e-08,\n",
       "       1.40036650e-09, 1.39626890e-06, 7.13207717e-08, 5.89821320e-09,\n",
       "       5.27132177e-07, 9.01833751e-08, 1.74219733e-09, 9.27294941e-07])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.abs(py_usr - swig_usr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3.70791303e-09, 2.40510589e-09, 3.11207039e-09, 4.97670927e-09,\n",
       "       2.84295626e-09, 1.52792426e-09, 4.21277002e-09, 2.53777008e-09,\n",
       "       2.89345725e-09, 1.20258070e-09, 1.05482703e-09, 2.84402807e-09])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.abs(c_usr - swig_usr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.35222182,  0.01906352, -0.04395271,  0.35195615,  0.02027721,\n",
       "        -0.02875005,  0.70689141,  0.07996982, -0.71981234,  0.61054763,\n",
       "         0.07276626, -0.35701096]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "swig_usr_vec = np.zeros((1,12))\n",
    "weights = np.ones(traj.n_atoms)\n",
    "#void pyUSRvec(int nframes, int natoms, int dim, double *TRJ, int n2, double *weights,\n",
    "#                      int nf, int ncomp, double *USRvec, int nthr, int verbosity)\n",
    "pyusr.pyUSRvec(traj.xyz, weights, swig_usr_vec, 1, 0)\n",
    "swig_usr_vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3.70791303e-09, 2.40510589e-09, 3.11207039e-09, 4.97670927e-09,\n",
       "       2.84295626e-09, 1.52792426e-09, 4.21277002e-09, 2.53777008e-09,\n",
       "       2.89345725e-09, 1.20258070e-09, 1.05482703e-09, 2.84402807e-09])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.abs(c_usr - swig_usr_vec[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Timing on traj \n",
    "\n",
    "should be done with bigger molecule"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3479, 14, 3)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "traj = md.load(\"traj_cys_pm7_R1.xyz\",top=\"traj_cys_pm7_R1.pdb\")\n",
    "traj.xyz.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3479, 12)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "swig_usr_vec = np.zeros((traj.xyz.shape[0],12))\n",
    "swig_usr_vec.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000 loops, best of 5: 1.43 ms per loop\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "pyusr.pyUSRvec(traj.xyz, weights, swig_usr_vec, 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000 loops, best of 5: 1.43 ms per loop\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "pyusr.pyUSRvec(traj.xyz, weights, swig_usr_vec, 2, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000 loops, best of 5: 1.43 ms per loop\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "pyusr.pyUSRvec(traj.xyz, weights, swig_usr_vec, 4, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000 loops, best of 5: 1.43 ms per loop\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "pyusr.pyUSRvec(traj.xyz, weights, swig_usr_vec, 6, 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## USR L1 distance matrix\n",
    "from swig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rm -f *.so *.o pyusr.py *.pyc *.a *.gch pyusr_wrap.c usr_wrap.c\n",
      "gcc usr.h -std=c99 -fPIC -O3 -ffast-math -ftree-vectorize -march=native -fomit-frame-pointer -finline-functions -I. -I/usr/include/python3.7/ -I/usr/local/lib/python3.7/dist-packages/numpy/core/include/ -c usr.c\n",
      "gcc -o usr.exe usr.o -lm -fopenmp -lgsl -lgslcblas -lblas\n",
      "swig  -python -Wall -l/usr/local/lib/python3.7/dist-packages/numpy/numpy.i pyusr.i\n",
      "gcc usr.h -std=c99 -fPIC -O3 -ffast-math -ftree-vectorize -march=native -fomit-frame-pointer -finline-functions -I. -I/usr/include/python3.7/ -I/usr/local/lib/python3.7/dist-packages/numpy/core/include/ -c pyusr_wrap.c\n",
      "gcc -shared -o _pyusr.so usr.o pyusr_wrap.o -lm -fopenmp -lgsl -lgslcblas -lblas\n",
      "/home/gmancini/Dropbox/appunti/Clustering/test\n"
     ]
    }
   ],
   "source": [
    "%%bash\n",
    "cd ../src\n",
    "make clean && make \n",
    "cd -"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 loop, best of 5: 1min 38s per loop\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "np_usrmat = mdutils.usr_mat(traj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3479, 12103441)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nframes = traj.xyz.shape[0]\n",
    "nframes, nframes*nframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([   0,    0,    0, ..., 3476, 3476, 3477]),\n",
       " array([   1,    2,    3, ..., 3477, 3478, 3478]))"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndx = np.triu_indices(nframes,1)\n",
    "ndx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "np_usrmat = mdutils.usr_mat(traj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6049981,)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np_usrmat[ndx].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "np_usrmat_1d = np_usrmat[ndx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6049981.0"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NN = (nframes*(nframes-1))/2\n",
    "NN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "traj.xyz.shape[0]\n",
    "USRmat = np.zeros(int(NN))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 loops, best of 5: 56.1 ms per loop\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "pyusr.pyUSR_L1_mat(swig_usr_vec, USRmat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "pyusr.pyUSR_L1_mat(swig_usr_vec, USRmat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 0.0)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test = np.abs(np_usrmat_1d-np_usrmat_1d)\n",
    "np.max(test),np.mean(test)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5rc1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
